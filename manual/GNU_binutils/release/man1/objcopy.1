.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "OBJCOPY 1"
.TH OBJCOPY 1 2025-10-13 binutils-2.45.50 "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.mso ja.tmac
.hla ja
.SH 名前
objcopy \- オブジェクトファイルのコピーや変換を行う
.SH 書式
.IX Header "書式"
objcopy [\fB\-F\fR \fIbfdname\fR|\fB\-\-target=\fR\fIbfdname\fR]
        [\fB\-I\fR \fIbfdname\fR|\fB\-\-input\-target=\fR\fIbfdname\fR]
        [\fB\-O\fR \fIbfdname\fR|\fB\-\-output\-target=\fR\fIbfdname\fR]
        [\fB\-B\fR \fIbfdarch\fR|\fB\-\-binary\-architecture=\fR\fIbfdarch\fR]
        [\fB\-S\fR|\fB\-\-strip\-all\fR]
        [\fB\-g\fR|\fB\-\-strip\-debug\fR]
        [\fB\-\-strip\-unneeded\fR]
        [\fB\-K\fR \fIsymbolname\fR|\fB\-\-keep\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-keep\-file\-symbols\fR]
        [\fB\-\-keep\-section\-symbols\fR]
        [\fB\-N\fR \fIsymbolname\fR|\fB\-\-strip\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-strip\-unneeded\-symbol=\fR\fIsymbolname\fR]
        [\fB\-G\fR \fIsymbolname\fR|\fB\-\-keep\-global\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-localize\-hidden\fR]
        [\fB\-L\fR \fIsymbolname\fR|\fB\-\-localize\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-globalize\-symbol=\fR\fIsymbolname\fR]
        [\fB\-\-globalize\-symbols=\fR\fIfilename\fR]
        [\fB\-W\fR \fIsymbolname\fR|\fB\-\-weaken\-symbol=\fR\fIsymbolname\fR]
        [\fB\-w\fR|\fB\-\-wildcard\fR]
        [\fB\-x\fR|\fB\-\-discard\-all\fR]
        [\fB\-X\fR|\fB\-\-discard\-locals\fR]
        [\fB\-b\fR \fIbyte\fR|\fB\-\-byte=\fR\fIbyte\fR]
        [\fB\-i\fR [\fIbreadth\fR]|\fB\-\-interleave\fR[=\fIbreadth\fR]]
        [\fB\-\-interleave\-width=\fR\fIwidth\fR]
        [\fB\-j\fR \fIsectionpattern\fR|\fB\-\-only\-section=\fR\fIsectionpattern\fR]
        [\fB\-R\fR \fIsectionpattern\fR|\fB\-\-remove\-section=\fR\fIsectionpattern\fR]
        [\fB\-\-keep\-section=\fR\fIsectionpattern\fR]
        [\fB\-\-remove\-relocations=\fR\fIsectionpattern\fR]
        [\fB\-\-strip\-section\-headers\fR]
        [\fB\-p\fR|\fB\-\-preserve\-dates\fR]
        [\fB\-D\fR|\fB\-\-enable\-deterministic\-archives\fR]
        [\fB\-U\fR|\fB\-\-disable\-deterministic\-archives\fR]
        [\fB\-\-debugging\fR]
        [\fB\-\-gap\-fill=\fR\fIval\fR]
        [\fB\-\-pad\-to=\fR\fIaddress\fR]
        [\fB\-\-set\-start=\fR\fIval\fR]
        [\fB\-\-adjust\-start=\fR\fIincr\fR]
        [\fB\-\-change\-addresses=\fR\fIincr\fR]
        [\fB\-\-change\-section\-address\fR \fIsectionpattern\fR{=,+,\-}\fIval\fR]
        [\fB\-\-change\-section\-lma\fR \fIsectionpattern\fR{=,+,\-}\fIval\fR]
        [\fB\-\-change\-section\-vma\fR \fIsectionpattern\fR{=,+,\-}\fIval\fR]
        [\fB\-\-change\-warnings\fR] [\fB\-\-no\-change\-warnings\fR]
        [\fB\-\-set\-section\-flags\fR \fIsectionpattern\fR=\fIflags\fR]
        [\fB\-\-set\-section\-alignment\fR \fIsectionpattern\fR=\fIalign\fR]
        [\fB\-\-add\-section\fR \fIsectionname\fR=\fIfilename\fR]
        [\fB\-\-dump\-section\fR \fIsectionname\fR=\fIfilename\fR]
        [\fB\-\-update\-section\fR \fIsectionname\fR=\fIfilename\fR]
        [\fB\-\-rename\-section\fR \fIoldname\fR=\fInewname\fR[,\fIflags\fR]]
        [\fB\-\-long\-section\-names\fR {enable,disable,keep}]
        [\fB\-\-change\-leading\-char\fR] [\fB\-\-remove\-leading\-char\fR]
        [\fB\-\-reverse\-bytes=\fR\fInum\fR]
        [\fB\-\-srec\-len=\fR\fIival\fR] [\fB\-\-srec\-forceS3\fR]
        [\fB\-\-redefine\-sym\fR \fIold\fR=\fInew\fR]
        [\fB\-\-redefine\-syms=\fR\fIfilename\fR]
        [\fB\-\-weaken\fR]
        [\fB\-\-keep\-symbols=\fR\fIfilename\fR]
        [\fB\-\-strip\-symbols=\fR\fIfilename\fR]
        [\fB\-\-strip\-unneeded\-symbols=\fR\fIfilename\fR]
        [\fB\-\-keep\-global\-symbols=\fR\fIfilename\fR]
        [\fB\-\-localize\-symbols=\fR\fIfilename\fR]
        [\fB\-\-weaken\-symbols=\fR\fIfilename\fR]
        [\fB\-\-add\-symbol\fR \fIname\fR=[\fIsection\fR:]\fIvalue\fR[,\fIflags\fR]]
        [\fB\-\-alt\-machine\-code=\fR\fIindex\fR]
        [\fB\-\-prefix\-symbols=\fR\fIstring\fR]
        [\fB\-\-prefix\-sections=\fR\fIstring\fR]
        [\fB\-\-prefix\-alloc\-sections=\fR\fIstring\fR]
        [\fB\-\-add\-gnu\-debuglink=\fR\fIpath\-to\-file\fR]
        [\fB\-\-only\-keep\-debug\fR]
        [\fB\-\-strip\-dwo\fR]
        [\fB\-\-extract\-dwo\fR]
        [\fB\-\-extract\-symbol\fR]
        [\fB\-\-writable\-text\fR]
        [\fB\-\-readonly\-text\fR]
        [\fB\-\-pure\fR]
        [\fB\-\-impure\fR]
        [\fB\-\-file\-alignment=\fR\fInum\fR]
        [\fB\-\-heap=\fR\fIreserve\fR[,\fIcommit\fR]]
        [\fB\-\-image\-base=\fR\fIaddress\fR]
        [\fB\-\-section\-alignment=\fR\fInum\fR]
        [\fB\-\-stack=\fR\fIreserve\fR[,\fIcommit\fR]]
        [\fB\-\-subsystem=\fR\fIwhich\fR:\fImajor\fR.\fIminor\fR]
        [\fB\-\-compress\-debug\-sections\fR]
        [\fB\-\-decompress\-debug\-sections\fR]
        [\fB\-\-elf\-stt\-common=\fR\fIval\fR]
        [\fB\-\-merge\-notes\fR]
        [\fB\-\-no\-merge\-notes\fR]
        [\fB\-\-verilog\-data\-width=\fR\fIval\fR]
        [\fB\-v\fR|\fB\-\-verbose\fR]
        [\fB\-V\fR|\fB\-\-version\fR]
        [\fB\-\-help\fR] [\fB\-\-info\fR]
        \fIinfile\fR [\fIoutfile\fR]
.SH 説明
.IX Header "説明"
The GNU \fBobjcopy\fR ユーティリティはオブジェクトファイルの内容を別ファイルにコピーします。\fBobjcopy\fR はオブジェクトファイルの読み書きに GNU BFD ライブラリを使用します。
これによって、書き込み先のオブジェクトファイルの形式を、元のオブジェクトファイルのものから変更できます。\fBobjcopy\fR の詳細な動作はコマンドラインオプションによって決定されます。
\&\fBobjcopy\fR は、2つの形式間で完全にリンクされたファイルをコピーできる必要があることに注意してください。ただし、再配置可能オブジェクトファイルを2つの形式間でコピーすると、予想どおりに動作しない場合があります。
.PP
\&\fBobjcopy\fR は変換を行う際に一時ファイルを作成し、動作後にこれを消去します。\fBobjcopy\fR 変換作業はすべて BFD によって行われます BFDで記述されているすべてのフォーマットにアクセスできるため、明示的に指示されなくてもほとんどのフォーマットを認識できます。
.PP
\&\fBobjcopy\fR は、 \fBsrec\fR の出力ターゲットを使用してSレコードを生成するために使用できます(例えば、\fB\-O srec\fR を使用)。
.PP
\&\fBobjcopy\fR は、\fBbinary\fR の出力ターゲットを使用して raw バイナリ・ファイルを生成するために使用できます(例: \fB\-O binary\fR を使用)。\fBobjcopy\fR が生のバイナリー・ファイルを生成する場合、基本的には入力されたオブジェクト・ファイルの内容のメモリー・ダンプを生成します。すべてのシンボルと再配置情報は破棄されます。メモリダンプは、出力ファイルにコピーされた最下位セクションのロードアドレスから開始されます。
.PP
Sレコードまたは生のバイナリファイルを生成する場合、\fB\-S\fR を使用してデバッグ情報を含むセクションを削除すると便利な場合があります。場合によっては、 \fB\-R\fR は、バイナリファイルに必要のない情報を含むセクションを削除するのに便利です。
.PP
注意\-\-\- \fBobjcopy\fR は入力ファイルのエンディアンを変更できません。入力フォーマットにエンディアンが設定されている場合 (一部のフォーマットでは設定されていない) 、\fBobjcopy\fR は入力を同じエンディアンのファイルフォーマットまたはエンディアンのないファイルフォーマット (\fBsrec\fR など) にコピーすることしかできません。
(ただし、\fB\-\-reverse\-bytes\fR オプションを参照してください) 。
.SH オプション
.IX Header "オプション"
.IP \fIinfile\fR 4
.IX Item "infile"
.PD 0
.IP \fIoutfile\fR 4
.IX Item "outfile"
.PD
は、それぞれ入力ファイルと出力ファイルです。
\&\fIoutfile\fR を指定しない場合、\fBobjcopy\fR はテンポラリ・ファイルを作成し、その結果を \fIinfile\fR という名前にリネームします。
.IP "\fB\-I\fR \fIbfdname\fR" 4
.IX Item "-I bfdname"
.PD 0
.IP \fB\-\-input\-target=\fR\fIbfdname\fR 4
.IX Item "--input-target=bfdname"
.PD
入力ファイルのオブジェクト形式を  \fIbfdname\fR として取り扱います。通常は自動的に推測します。Xrefなので削る
.Sp
出力ファイルのオブジェクト形式を\fIbfdname\fR とします。
Xrefなので削る
.IP "\fB\-F\fR \fIbfdname\fR" 4
.IX Item "-F bfdname"
.PD 0
.IP \fB\-\-target=\fR\fIbfdname\fR 4
.IX Item "--target=bfdname"
.PD
入出力ファイルのオブジェクト形式に \fIbfdname\fR を使用します。すなわち、入力ファイルを変換せずに単に出力ファイルにコピーします。Xrefなので削る
.IP "\fB\-B\fR \fIbfdarch\fR" 4
.IX Item "-B bfdarch"
.PD 0
.IP \fB\-\-binary\-architecture=\fR\fIbfdarch\fR 4
.IX Item "--binary-architecture=bfdarch"
.PD
アーキテクチャのない入力ファイルをオブジェクトファイルに変換する場合に便利です。
この場合、出力のアーキテクチャは\fIbfdarch\fRに設定できます。入力されるファイルに既知の \fIbfdarch\fR が含まれている場合、このオプションは無視されます。プログラム内でこのバイナリデータにアクセスするには、変換処理で作成された特殊記号を参照します。これらのシンボルは、 _binary_\fIobjfile\fR _start 、binary_\fIobjfile\fR_end 、_binary_\fIobjfile\fR_size と呼ばれています。たとえば、画像ファイルをオブジェクトファイルに変換し、これらのシンボルを使用してコード内でアクセスできます。
.IP "\fB\-j\fR \fIsectionpattern\fR" 4
.IX Item "-j sectionpattern"
.PD 0
.IP \fB\-\-only\-section=\fR\fIsectionpattern\fR 4
.IX Item "--only-section=sectionpattern"
.PD
指定されたセクションのみを入力ファイルから出力ファイルにコピーします。
このオプションは複数回指定できます。このオプションを不適切に使用すると、出力ファイルが使用できなくなる可能性があることに注意してください。\fIsectionpattern\fR では、ワイルドカード文字を使用できます。
.Sp
\&\fIsectionpattern\fR の最初の文字が感嘆符(!)の場合、同じコマンドラインで以前に \fB\-\-only\-section\fR を使用していた場合でも、一致するセクションはコピーされません。たとえば以下のようなものです:
.Sp
.Vb 1
\&          \-\-only\-section=.text.* \-\-only\-section=!.text.foo
.Ve
.Sp
上記は \*(Aq.text.*\*(Aq に一致するすべてのセクションがコピーされますが、\*(Aq.text.foo\*(Aq セクションはコピーされません。
.IP "\fB\-R\fR \fIsectionpattern\fR" 4
.IX Item "-R sectionpattern"
.PD 0
.IP \fB\-\-remove\-section=\fR\fIsectionpattern\fR 4
.IX Item "--remove-section=sectionpattern"
.PD
\&\fIsectionpattern\fR に一致するセクションを出力から削除します。
このオプションは複数回指定できます。このオプションを不適切に使用すると、出力ファイルが使用できなくなる可能性があることに注意してください。\fIsectionpattern\fR では、ワイルドカード文字を使用できます。\fB\-j\fR と \fB\-R\fR の両方のオプションを一緒に使用すると、動作が不定になります。
.Sp
\&\fIsectionpattern\fR の最初の文字が感嘆符 (!) の場合、同じコマンドラインで以前に\fB\-\-remove\-section\fR を使用して削除されたとしても、一致するセクションは削除されません。たとえば以下のようなものです:
.Sp
.Vb 1
\&          \-\-remove\-section=.text.* \-\-remove\-section=!.text.foo
.Ve
.Sp
パターン \*(Aq.text.*\*(Aq に一致するすべてのセクションが削除されますが、セクション \*(Aq.text.foo\*(Aq は削除されません。
.IP \fB\-\-keep\-section=\fR\fIsectionpattern\fR 4
.IX Item "--keep-section=sectionpattern"
出力ファイルからセクションを削除する場合は、\fIsectionpattern\fR と一致するセクションを保持します。
.IP \fB\-\-remove\-relocations=\fR\fIsectionpattern\fR 4
.IX Item "--remove-relocations=sectionpattern"
\&\fIsectionpattern\fR に一致するセクションの非動的再配置を出力から削除します。このオプションは、複数回指定できます。このオプションを不適切に使用すると、出力されたファイルが使用できなくなる可能性があることに注意してください。また、 \fB.rela.plt\fR を使用して実行可能ファイルまたは共有ライブラリから \fB\-\-remove\-relocations=.plt\fR などの動的再配置セクションを削除しようとしても機能しません。\fIsectionpattern\fR では、ワイルドカード文字を使用できます。
たとえば以下のようなものです:
.Sp
.Vb 1
\&          \-\-remove\-relocations=.text.*
.Ve
.Sp
これは パターン \*(Aq.text.*\*(Aq に一致するすべてのセクションの再配置を削除します。
.Sp
\&\fIsectionpattern\fR の最初の文字が感嘆符(!)の場合、同じコマンドラインで以前に \fB\-\-remove\-relocations\fR を使用したときに再配置が削除されたとしても、一致するセクションの再配置は削除されません。
たとえば以下のようなものです:
.Sp
.Vb 1
\&          \-\-remove\-relocations=.text.* \-\-remove\-relocations=!.text.foo
.Ve
.Sp
パターン \*(Aq.text.*\*(Aq に一致するセクションの再配置はすべて削除されますが、セクション \*(Aq.text.foo\*(Aq の再配置は削除されません。
.IP \fB\-\-strip\-section\-headers\fR 4
.IX Item "--strip-section-headers"
セクションヘッダーを削除します。このオプションは、ELFファイルに固有です。
\&\fB\-\-strip\-all\fR と \fB\-\-merge\-notes\fRを仮定します。
.Sp
再配置およびシンボル情報をソースファイルからコピーしません。
また、デバッグセクションも削除します。
.IP \fB\-g\fR 4
.IX Item "-g"
.PD 0
.IP \fB\-\-strip\-debug\fR 4
.IX Item "--strip-debug"
.PD
デバッグシンボルを入力ファイルからコピーしません。
.IP \fB\-\-strip\-unneeded\fR 4
.IX Item "--strip-unneeded"
\&\fB\-\-strip\-debug\fR によって除去されたセクションとデバッグシンボルに加えて、再配置処理に不要なすべてのシンボルを削除します。
.IP "\fB\-K\fR \fIsymbolname\fR" 4
.IX Item "-K symbolname"
.PD 0
.IP \fB\-\-keep\-symbol=\fR\fIsymbolname\fR 4
.IX Item "--keep-symbol=symbolname"
.PD
シンボルを除去するときは、通常除去される場合でも、シンボル \fIsymbolname\fR をそのままにします。このオプションは複数回指定できます。
.IP "\fB\-N\fR \fIsymbolname\fR" 4
.IX Item "-N symbolname"
.PD 0
.IP \fB\-\-strip\-symbol=\fR\fIsymbolname\fR 4
.IX Item "--strip-symbol=symbolname"
.PD
ソースファイルからシンボル\fIsymbolname\fR をコピーしません。このオプションは、複数回指定できます
.IP \fB\-\-strip\-unneeded\-symbol=\fR\fIsymbolname\fR 4
.IX Item "--strip-unneeded-symbol=symbolname"
再配置で必要になる場合を除き、ソースファイルからシンボル \fIsymbolname\fR をコピーしません。このオプションは複数回指定できます。
.IP "\fB\-G\fR \fIsymbolname\fR" 4
.IX Item "-G symbolname"
.PD 0
.IP \fB\-\-keep\-global\-symbol=\fR\fIsymbolname\fR 4
.IX Item "--keep-global-symbol=symbolname"
.PD
シンボル \fIsymbolname\fR のみをグローバルに保持します。他のすべてのシンボルをファイルに対してローカルにし、外部から見えないようにします。このオプションは、複数回指定できます。注意: このオプションは、 \fB\-\-globalize\-symbol\fR または \fB\-\-globalize\-symbols\fR オプションと一緒に使用することはできません。
.IP \fB\-\-localize\-hidden\fR 4
.IX Item "--localize-hidden"
ELF オブジェクトで、非表示または内部可視性を持つすべてのシンボルをローカルとしてマークします。このオプションは、最上位のシンボル固有のローカライズオプション( \fB\-L\fRなど)に適用されます。
.IP "\fB\-L\fR \fIsymbolname\fR" 4
.IX Item "-L symbolname"
.PD 0
.IP \fB\-\-localize\-symbol=\fR\fIsymbolname\fR 4
.IX Item "--localize-symbol=symbolname"
.PD
\&\fIsymbolname\fR というグローバルシンボルまたはウィークシンボルをローカルシンボルに変換して、外部から見えないようにします。このオプションは、複数回指定できます。注意 \- 一意のシンボルは変換されません。
.IP "\fB\-W\fR \fIsymbolname\fR" 4
.IX Item "-W symbolname"
.PD 0
.IP \fB\-\-weaken\-symbol=\fR\fIsymbolname\fR 4
.IX Item "--weaken-symbol=symbolname"
.PD
シンボル \fIsymbolname\fR を weakにします。このオプションは複数回指定できます。
.IP \fB\-\-globalize\-symbol=\fR\fIsymbolname\fR 4
.IX Item "--globalize-symbol=symbolname"
シンボル \fIsymbolname\fR にグローバルスコープを指定して、シンボルを定義したファイルの外から見えるようにします。<このオプションは、複数回指定できます注記:このオプションは、 \fB\-G\fR または \fB\-\-keep\-global\-symbol\fR のオプションと組み合わせて使用することはできません。
.IP \fB\-w\fR 4
.IX Item "-w"
.PD 0
.IP \fB\-\-wildcard\fR 4
.IX Item "--wildcard"
.PD
他のコマンドラインオプションで使用される \fIsymbolname\fRで正規表現を許可します。疑問符 (?) 、アスタリスク (*) 、バックスラッシュ (\e) 、および角カッコ ([]) の演算子は、シンボル名のどこにでも使用できます。シンボル名の最初の文字が感嘆符 (!) の場合は、そのシンボルの真偽値が逆になります。
たとえば以下のようなものです:
.Sp
.Vb 1
\&          \-w \-W !foo \-W fo*
.Ve
.Sp
これは objcopy が「foo」以外の「fo」で始まるすべてのシンボルを弱くする原因となります。
.IP \fB\-x\fR 4
.IX Item "-x"
.PD 0
.IP \fB\-\-discard\-all\fR 4
.IX Item "--discard-all"
.PD
入力ファイルのグローバルでないシンボルはコピーしません。
.IP \fB\-X\fR 4
.IX Item "-X"
.PD 0
.IP \fB\-\-discard\-locals\fR 4
.IX Item "--discard-locals"
.PD
コンパイラが生成したローカルなシンボルはコピーしません。
  (通常 "L" または "." ではじまるシンボルです) 。
.IP "\fB\-b\fR \fIbyte\fR" 4
.IX Item "-b byte"
.PD 0
.IP \fB\-\-byte=\fR\fIbyte\fR 4
.IX Item "--byte=byte"
.PD
\&\fB\-\-interleave\fR オプションでインタリーブが有効になっている場合は、\fIbyte\fR 番目のバイトから保持するバイト範囲を開始します。
\&\fIbyte\fR は 0 から \fIbreadth\fR \-1 の範囲で、\fIbreadth\fR は \fB\-\-interleave\fR オプションで指定された値です。
.IP "\fB\-i [\fR\fIbreadth\fR\fB]\fR" 4
.IX Item "-i [breadth]"
.PD 0
.IP \fB\-\-interleave[=\fR\fIbreadth\fR\fB]\fR 4
.IX Item "--interleave[=breadth]"
.PD
すべての \fIbreadth\fR バイトからのみ範囲をコピーします。(ヘッダーデータは影響を受けません)。\fB\-\-byte\fR オプションを使用して、コピーを開始する範囲内のバイトを選択します。\fB\-\-interleave\-width\fR オプションを使用して、範囲の幅を選択します。
.Sp
このオプションは、 ROM プログラムへのファイルを作成する場合に便利です。通常は \f(CW\*(C`srec\*(C'\fR 出力ターゲットとともに使用されます。\fB\-\-byte\fR オプションも指定しないと、 \fBobjcopy\fR はエラーになることに注意してください。
.Sp
デフォルトのインタリーブ幅は 4 であるため、 \fB\-\-byte\fR が 0 に設定されている場合、 \fBobjcopy\fR は 4 バイトごとに最初のバイトを入力から出力にコピーします。
.IP \fB\-\-interleave\-width=\fR\fIwidth\fR 4
.IX Item "--interleave-width=width"
\&\fB\-\-interleave\fR オプションとともに使用する場合は、\fIwidth\fR バイトを一度にコピーします。コピーするバイト範囲の開始位置は \fB\-\-byte\fR オプションで設定し、範囲の大きさは \fB\-\-interleave\fR オプションで設定します。
.Sp
このオプションのデフォルト値は 1 です。\fIwidth\fR オプションで設定された \fIbyte\fR 値に \fB\-\-byte\fR を加えた値は、\fB\-\-interleave\fR オプションで設定されたインタリーブ幅を超えてはなりません。
.Sp
このオプションは、\fB\-b 0 \-i 4 \-\-interleave\-width=2\fR と \fB\-b 2 \-i 4 \-\-interleave\-width=2\fR を 2 つの\fBobjcopy\fR コマンドに渡すことで、32ビットバスにインターリーブされた 2 つ の 16ビットフラッシュのイメージを作成するために使用できます。入力が「12345678」の場合、出力はそれぞれ「1256」と「3478」になります。
.IP \fB\-p\fR 4
.IX Item "-p"
.PD 0
.IP \fB\-\-preserve\-dates\fR 4
.IX Item "--preserve-dates"
.PD
出力ファイルのアクセス日付と修正日付を、入力ファイルと同じ日付に設定します。
.Sp
このオプションは、 SOURCE_DATE_EPOCH 環境変数が定義されていない限り、PE フォーマット・ファイルのヘッダーに格納されているデータもコピーします。これが定義されている場合、この変数はヘッダーに保存されている日付として使用され、Unix エポックからの秒数として解釈されます。
.IP \fB\-D\fR 4
.IX Item "-D"
.PD 0
.IP \fB\-\-enable\-deterministic\-archives\fR 4
.IX Item "--enable-deterministic-archives"
.PD
\&\fIdeterministic\fR モードで動作します。アーカイブメンバーをコピーしてアーカイブインデックスを書き込む場合は、UID、GID、タイムスタンプにゼロを使用し、すべてのファイルに対して一貫したファイルモードを使用します。
.Sp
\&\fIbinutils\fR が \fB\-\-enable\-deterministic\-archives\fR と設定されている場合、このモードはデフォルトで有効になります。
以下の \fB\-U\fR オプションで無効にできます。
.IP \fB\-U\fR 4
.IX Item "-U"
.PD 0
.IP \fB\-\-disable\-deterministic\-archives\fR 4
.IX Item "--disable-deterministic-archives"
.PD
\&\fInot\fR を \fIdeterministic\fR モードで動作させます。これは、上記の \fB\-D\fR オプションの逆です。アーカイブメンバーをコピーしてアーカイブインデックスを書き込む場合は、実際の UID、GID、タイムスタンプ、およびファイルモードの値を使用します。
.Sp
\&\fIbinutils\fR が \fB\-\-enable\-deterministic\-archives\fR で設定されていない限り、これがデフォルトです。
.IP \fB\-\-debugging\fR 4
.IX Item "--debugging"
可能ならばデバッグ情報を変換します。特定のデバッグ形式のみがサポートされており、変換プロセスには時間がかかる可能性があるため、これはデフォルトではありません。
.IP "\fB\-\-gap\-fill\fR \fIval\fR" 4
.IX Item "--gap-fill val"
\&\fIval\fR でセクション間のギャップを埋めます。この操作は、セクションの \fIload address\fR (LMA) に適用されます。これは、下位アドレスのセクションサイズを拡大することにより行われ、作成された余分なスペースを \fIval\fR で埋めます。
.IP "\fB\-\-pad\-to\fR \fIaddress\fR" 4
.IX Item "--pad-to address"
ロード・アドレス \fIaddress\fRまで出力ファイルを埋めます。これは、最後のセクションのサイズを大きくすることによって行われます。余分なスペースは、 \fB\-\-gap\-fill\fR で指定された値で埋められます(既定はゼロ)。
.IP "\fB\-\-set\-start\fR \fIval\fR" 4
.IX Item "--set-start val"
新しいファイルの開始アドレス (エントリアドレスとも呼びます) を \fIval\fR に設定します。すべてのオブジェクトファイルフォーマットが開始アドレスの設定をサポートしているわけではありません。
.IP "\fB\-\-change\-start\fR \fIincr\fR" 4
.IX Item "--change-start incr"
.PD 0
.IP "\fB\-\-adjust\-start\fR \fIincr\fR" 4
.IX Item "--adjust-start incr"
.PD
\&\fIincr\fR を追加して、開始アドレス (エントリアドレスとも呼びます) を変更します。すべてのオブジェクトファイルフォーマットがエントリアドレスの設定をサポートしているわけではありません。
.IP "\fB\-\-change\-addresses\fR \fIincr\fR" 4
.IX Item "--change-addresses incr"
.PD 0
.IP "\fB\-\-adjust\-vma\fR \fIincr\fR" 4
.IX Item "--adjust-vma incr"
.PD
\&\fIincr\fR を追加して、すべてのセクションの VMA と LMA アドレス、およびエントリアドレスを変更します。オブジェクトファイルのフォーマットによっては、セクションアドレスを任意に変更できない場合があります。これはセクションを再配置しないことに注意してください。プログラムがセクションを特定のアドレスにロードすることを想定している場合、このオプションを使用してセクションを別のアドレスにロードするように変更すると、プログラムが失敗する可能性があります。
.IP "\fB\-\-change\-section\-address\fR \fIsectionpattern\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--change-section-address sectionpattern{=,+,-}val"
.PD 0
.IP "\fB\-\-adjust\-section\-vma\fR \fIsectionpattern\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--adjust-section-vma sectionpattern{=,+,-}val"
.PD
\&\fIsectionpattern\fR に一致するセクションの VMA アドレスと LMA アドレスの両方を設定または変更します。\fB=\fR を使用する場合、セクション・アドレスは \fIval\fR に設定されます。それ以外の場合は、セクションアドレスに\fIval\fR が加算または減算されます。上記の\fB\-\-change\-addresses\fR にあるコメントを参照してください。\fIsectionpattern\fR が入力ファイルのどのセクションとも一致しない場合は、\fB\-\-no\-change\-warnings\fR を使用しない限り、警告が発行されます。
.IP "\fB\-\-change\-section\-lma\fR \fIsectionpattern\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--change-section-lma sectionpattern{=,+,-}val"
\&\fIsectionpattern\fR に一致するセクションの LMA アドレスを設定または変更します。LMA アドレスは、プログラムのロード時にセクションがメモリにロードされるアドレスです。通常、これはプログラム実行時のセクションのアドレスである VMA アドレスと同じですが、一部のシステム、特にプログラムが ROM に保持されているシステムでは、この 2 つが異なる場合があります。\fB=\fR を使用する場合、セクション・アドレスは \fIval\fR に設定されます。それ以外の場合は、セクションアドレスに\fIval\fR が加算または減算されます。上記の \fB\-\-change\-addresses\fR にあるコメントを参照してください。\fIsectionpattern\fR が入力ファイルのどのセクションとも一致しない場合は、\fB\-\-no\-change\-warnings\fR を使用しない限り、警告が発行されます。
.IP "\fB\-\-change\-section\-vma\fR \fIsectionpattern\fR\fB{=,+,\-}\fR\fIval\fR" 4
.IX Item "--change-section-vma sectionpattern{=,+,-}val"
\&\fIsectionpattern\fR に一致するセクションの VMA アドレスを設定または変更します。VMA アドレスは、プログラムが実行を開始した後にセクションが配置されるアドレスです。
通常、これはセクションがメモリにロードされるアドレスである LMA アドレスと同じですが、一部のシステム、特にプログラムが ROM に保持されているシステムでは、この 2 つが異なる場合があります。\fB=\fR を使用する場合、セクション・アドレスは \fIval\fR に設定されます。それ以外の場合は、セクションアドレスに \fIval\fR が加算または減算されます。上記の\fB\-\-change\-addresses\fR にあるコメントを参照してください。\fIsectionpattern\fR が入力ファイルのどのセクションとも一致しない場合は、\fB\-\-no\-change\-warnings\fR を使用しない限り、警告が発行されます。
.Sp
注:完全にリンクされたバイナリ内のセクションの VMA を変更すると、そのセクションが古いアドレスにあることを期待するコードが存在する可能性があるため、危険な場合があります。
.IP \fB\-\-change\-warnings\fR 4
.IX Item "--change-warnings"
.PD 0
.IP \fB\-\-adjust\-warnings\fR 4
.IX Item "--adjust-warnings"
.PD
\&\fB\-\-change\-section\-address\fR 、 \fB\-\-change\-section\-lma\fR 、または \fB\-\-change\-section\-vma\fR を使用していて、セクションパターンがどのセクションとも一致しない場合は、警告が表示されます。これがデフォルトです。
.IP \fB\-\-no\-change\-warnings\fR 4
.IX Item "--no-change-warnings"
.PD 0
.IP \fB\-\-no\-adjust\-warnings\fR 4
.IX Item "--no-adjust-warnings"
.PD
\&\fB\-\-change\-section\-address\fR 、 \fB\-\-adjust\-section\-lma\fR 、または \fB\-\-adjust\-section\-vma\fR を使用している場合は、セクションパターンがどのセクションとも一致しない場合でも、警告は表示されません。
.IP "\fB\-\-set\-section\-flags\fR \fIsectionpattern\fR\fB=\fR\fIflags\fR" 4
.IX Item "--set-section-flags sectionpattern=flags"
\&\fIsectionpattern\fR に一致するセクションのフラグを設定します。\fIflags\fR 引数は、フラグ名をコンマで区切った文字列です。認識される名前は、 \fBalloc\fR、 \fBcontents\fR、 \fBload\fR、
\&\fBnoload\fR、 \fBreadonly\fR、 \fBcode\fR、 \fBdata\fR、 \fBrom\fR、
\&\fBexclude\fR、 \fBshare\fR、 \fBdebug\fR、と \fBlarge\fR です。
内容を持たないセクションに対して \fBcontents\fR フラグを設定することはできますが、内容を持つセクションの \fBcontents\fR フラグをクリアしても意味がありません。代わりにセクションを削除してください。すべてのフラグがすべてのオブジェクトファイルフォーマットで意味を持つわけではありません。特に \fBshare\fR フラグは COFF 形式ファイルでのみ意味があり、ELF 形式ファイルでは意味がありません。ELF X86\-64 固有のフラグ \fBlarge\fR は、SHF_X86_64_LARGE に対応します。
.IP "\fB\-\-set\-section\-alignment\fR \fIsectionpattern\fR\fB=\fR\fIalign\fR" 4
.IX Item "--set-section-alignment sectionpattern=align"
\&\fIsectionpattern\fR に一致するセクションのアラインメントを設定します。
\&\fIalign\fR はアラインメントをバイト単位で指定し、2のべき乗、つまり1、2、4、8... でなければなりません。
.Sp
注意:セクションの位置合わせを設定しても、その LMA または VMA アドレスは自動的には位置合わせされません。これらも変更する必要がある場合は、\fB\-\-change\-section\-lma\fR および/または \fB\-\-change\-section\-vma\fR オプションを使用する必要があります。また、VMA を変更すると、完全にリンクされたバイナリで問題が発生する可能性があることにも注意してください。この場合、セクションの内容が古いアドレスにあることを期待するコードが存在する可能性があります。
.IP "\fB\-\-add\-section\fR \fIsectionname\fR\fB=\fR\fIfilename\fR" 4
.IX Item "--add-section sectionname=filename"
ファイルのコピー中に \fIsectionname\fR という名前の新しいセクションを追加します。新しいセクションの内容は、ファイル \fIfilename\fR から取得されます。セクションのサイズはファイルのサイズになります。このオプションは、任意の名前のセクションをサポートできるファイル形式でのみ機能します。
注意\-新しく作成されたセクションの属性を設定するには、\fB\-\-set\-section\-flags\fR オプションを使用する必要がある場合があります。
.IP "\fB\-\-dump\-section\fR \fIsectionname\fR\fB=\fR\fIfilename\fR" 4
.IX Item "--dump-section sectionname=filename"
\&\fIsectionname\fRという名前のセクションの内容をファイルを \fIfilename\fR に配置し、以前にそこにあった可能性のある内容を上書きします。このオプションは \fB\-\-add\-section\fR の逆です。
このオプションは \fB\-\-only\-section\fR オプションと似ていますが、フォーマットされたファイルを作成せず、再配置を適用せずに内容を生のバイナリデータとしてダンプするだけである点が異なります。このオプションは、複数回指定できます。
.IP "\fB\-\-update\-section\fR \fIsectionname\fR\fB=\fR\fIfilename\fR" 4
.IX Item "--update-section sectionname=filename"
\&\fIsectionname\fR という名前のセクションの既存の内容を \fIfilename\fR ファイルの内容に置き換えます。セクションのサイズは、ファイルのサイズに合わせて調整されます。\fIsectionname\fR のセクションフラグは変更されません。ELF 形式のファイルでは、セクションからセグメントへのマッピングも変更されません。\fB\-\-remove\-section\fR の後に \fB\-\-add\-section\fR を使用することはできません。このオプションは、複数回指定できます。
.Sp
注意\- \fB\-\-rename\-section\fR と \fB\-\-update\-section\fR を使用して、 1つのコマンドラインからセクションの更新と名前変更の両方を行うことができます。この場合、元のセクション名を \fB\-\-update\-section\fR に渡し、元のセクション名と新しいセクション名を \fB\-\-rename\-section\fR に渡します。
.IP "\fB\-\-add\-symbol\fR \fIname\fR\fB=[\fR\fIsection\fR\fB:]\fR\fIvalue\fR\fB[,\fR\fIflags\fR\fB]\fR" 4
.IX Item "--add-symbol name=[section:]value[,flags]"
ファイルのコピー中に \fIname\fR という名前の新しいシンボルを追加します。このオプションは、複数回指定できます。\fIsection\fR が指定されている場合、シンボルはそのセクションに関連付けられます。指定されていない場合は、 ABS シンボルになります。未定義のセクションを指定すると、致命的なエラーが発生します。値のチェックは行われず、指定したとおりに扱われます。シンボルフラグを指定できますが、すべてのフラグがすべてのオブジェクトファイルフォーマットで意味を持つわけではありません。デフォルトでは、シンボルはグローバルになります。特殊なフラグ \*(Aqbefore=\fIothersym\fR\*(Aq は、指定された \fIothersym\fR の前に新しいシンボルを挿入します。それ以外の場合、シンボルはシンボルテーブルの最後に出現順に追加されます。
.IP "\fB\-\-rename\-section\fR \fIoldname\fR\fB=\fR\fInewname\fR\fB[,\fR\fIflags\fR\fB]\fR" 4
.IX Item "--rename-section oldname=newname[,flags]"
セクション名を \fIoldname\fR から \fInewname\fR に変更します。オプションで、その過程でセクションのフラグを \fIflags\fR に変更できます。これは、出力がオブジェクトファイルのままであり、リンクされた実行可能ファイルにならないという点で、名前変更を実行するためにリンカースクリプトを使用するよりも有利です。このオプションは\fB\-\-set\-section\-flags\fRオプションと同じフラグを受け付けます。
.Sp
このオプションは、入力形式がバイナリの場合に特に役立ちます。これにより、常に .data というセクションが作成されるためです。たとえば、バイナリデータを含む .rodata というセクションを作成する場合は、次のコマンドラインを使用して実行できます:
.Sp
.Vb 3
\&          objcopy \-I binary \-O <output_format> \-B <architecture> \e
\&           \-\-rename\-section .data=.rodata,alloc,load,readonly,data,contents \e
\&           <input_binary_file> <output_object_file>
.Ve
.IP "\fB\-\-long\-section\-names {enable,disable,keep}\fR" 4
.IX Item "--long-section-names {enable,disable,keep}"
\&\f(CW\*(C`COFF\*(C'\fR および \f(CW\*(C`PE\-COFF\*(C'\fR オブジェクト形式を処理する際の長いセクション名の処理を制御します。デフォルトの動作は \fBkeep\fR で、入力ファイルに長いセクション名がある場合は、それを保持します。
\&\fBenable\fR および \fBdisable\fR オプションは、出力オブジェクトでの長いセクション名の使用を強制的に有効または無効にします。 \fBdisable\fR が有効な場合、入力オブジェクトの長いセクション名は切り捨てられます。
\&\fBenable\fR オプションは、入力に長いセクション名がある場合にのみ出力します。これはほとんど \fBkeep\fR と同じですが、 \fBenable\fR オプションが出力ファイルに空の文字列テーブルを強制的に作成するかどうかは定義されていません。
.IP \fB\-\-change\-leading\-char\fR 4
.IX Item "--change-leading-char"
一部のオブジェクトファイル形式では、シンボルの先頭に特殊文字が使用されます。最も一般的なこのような文字はアンダースコアで、コンパイラがすべてのシンボルの前に追加することがよくあります。このオプションは、\fBobjcopy\fR に対して、オブジェクト・ファイル・フォーマット間の変換時に各シンボルの先頭文字を変更するように指示します。オブジェクトファイル形式で同じ先頭文字が使用されている場合、このオプションは無効です。それ以外の場合は、必要に応じて文字を追加、削除、または変更します。
.IP \fB\-\-remove\-leading\-char\fR 4
.IX Item "--remove-leading-char"
大域シンボルの最初の文字がオブジェクトファイルフォーマットで使用される特殊なシンボル先頭文字である場合は、その文字を削除します。最も一般的な記号の先頭文字はアンダースコアです。このオプションは、すべての大域シンボルから先頭のアンダースコアを削除します。これは、シンボル名の規則が異なるさまざまなファイル形式のオブジェクトをリンクする場合に便利です。これは、出力されるファイルのフォーマットに関係なく、必要に応じて常にシンボル名を変更するという点で、\fB\-\-change\-leading\-char\fR とは異なります。
.IP \fB\-\-reverse\-bytes=\fR\fInum\fR 4
.IX Item "--reverse-bytes=num"
出力内容を含むセクション内のバイトを反転します。スワップを実行するには、セクションの長さが指定された値で均等に割り切れる必要があります。インターリーブが実行される前に、リバースが行われます。
.Sp
このオプションは、通常、問題のあるターゲットシステムの ROM イメージを生成するときに使用されます。例えば、一部のターゲットボードでは、 8ビット ROM からフェッチされ た 32ビットワードは、CPU のバイト順序に関係なく、リトルエンディアンのバイト順序で再構成されます。プログラミングモデルによっては、ROM のエンディアンを変更する必要があります。
.Sp
\&\f(CW12345678\fR という 8バイトを含むセクションを持つ単純なファイルを考えてみましょう。
.Sp
上記の例で\fB\-\-reverse\-bytes=2\fR を使用すると、出力ファイルのバイトは \f(CW21436587\fR の順になります。
.Sp
上記の例で \fB\-\-reverse\-bytes=4\fR を使用すると、出力ファイルのバイトは \f(CW43218765\fR の順になります。
.Sp
上記の例で\fB\-\-reverse\-bytes=2\fR を使用し、その後に出力ファイルで \fB\-\-reverse\-bytes=4\fR を使用すると、 2番目の出力ファイルのバイトは \f(CW34127856\fR の順序になります。
.IP \fB\-\-srec\-len=\fR\fIival\fR 4
.IX Item "--srec-len=ival"
srec 出力に対してのみ有効。生成される Srecord の最大長を \fIival\fR に設定します。この長さは、アドレス、データおよび CRC フィールドの両方をカバーします。
.IP \fB\-\-srec\-forceS3\fR 4
.IX Item "--srec-forceS3"
srec 出力に対してのみ有効です。S1/S2 レコードの生成を避け、S3 のみのレコード形式を作成します。
.IP "\fB\-\-redefine\-sym\fR \fIold\fR\fB=\fR\fInew\fR" 4
.IX Item "--redefine-sym old=new"
シンボル名 \fIold\fR を \fInew\fR に変更します。これは、ソースがなく、名前の競合がある 2つのものをリンクしようとする場合に便利です。
.IP \fB\-\-redefine\-syms=\fR\fIfilename\fR 4
.IX Item "--redefine-syms=filename"
ファイル \fIfilename\fR にリストされている各シンボルペア「\fIold\fR \fInew\fR」に \fB\-\-redefine\-sym\fR を適用します。\fIfilename\fR は、1行に 1つのシンボルペアを持つ単純な平文ファイルです。行コメントはハッシュ文字(井桁文字)で始めることができます。このオプションは複数回指定できます。
.IP \fB\-\-weaken\fR 4
.IX Item "--weaken"
ファイル内のすべてのグローバルシンボルをウィークシンボルに変更します。これは、リンカに対して \fB\-R\fR オプションを使用し、他のオブジェクトに対してリンクされるオブジェクトを構築する場合に便利です。このオプションは、ウィークシンボルをサポートするオブジェクトファイルフォーマットを使用する場合にのみ有効です。
.IP \fB\-\-keep\-symbols=\fR\fIfilename\fR 4
.IX Item "--keep-symbols=filename"
\&\fIfilename\fR ファイルにリストされている各シンボルに \fB\-\-keep\-symbol\fR オプションを適用します。\fIfilename\fRは単なる平文ファイルで、1行に 1つのシンボル名が含まれています。行コメントはハッシュ文字(井桁文字)で始めることができます。
このオプションは複数回指定できます。
.IP \fB\-\-strip\-symbols=\fR\fIfilename\fR 4
.IX Item "--strip-symbols=filename"
ファイル\fIfilename\fR にリストされている各シンボルに \fB\-\-strip\-symbol\fR オプションを適用します。\fIfilename\fRは単なる平文ファイルで、1行に 1つのシンボル名が含まれています。行コメントはハッシュ文字(井桁文字)で始めることができます。
このオプションは複数回指定できます。
.IP \fB\-\-strip\-unneeded\-symbols=\fR\fIfilename\fR 4
.IX Item "--strip-unneeded-symbols=filename"
\&\fIfilename\fR ファイルにリストされている各シンボルに \fB\-\-strip\-unneeded\-symbol\fR オプションを適用します。\fIfilename\fR は単なる平文ファイルで、 1行に 1つのシンボル名が含まれています。行コメントはハッシュ文字(井桁文字)で始めることができます。このオプションは複数回指定できます。
.IP \fB\-\-keep\-global\-symbols=\fR\fIfilename\fR 4
.IX Item "--keep-global-symbols=filename"
\&\fIfilename\fRファイルにリストされている各シンボルに \fB\-\-keep\-global\-symbol\fR オプションを適用します。\fIfilename\fR は単なる平文ファイルで、 1行に 1つのシンボル名が含まれています。行コメントはハッシュ文字(井桁文字)で始めることができます。このオプションは複数回指定できます。
.IP \fB\-\-localize\-symbols=\fR\fIfilename\fR 4
.IX Item "--localize-symbols=filename"
\&\fIfilename\fR ファイルにリストされている各シンボルに \fB\-\-localize\-symbol\fR オプションを適用します。\fIfilename\fRは単なる平文ファイルで、1行に 1つのシンボル名が含まれています。行コメントはハッシュ文字(井桁文字)で始めることができます。
このオプションは複数回指定できます。
.IP \fB\-\-globalize\-symbols=\fR\fIfilename\fR 4
.IX Item "--globalize-symbols=filename"
\&\fIfilename\fR ファイルにリストされている各シンボルに \fB\-\-globalize\-symbol\fR オプションを適用します。\fIfilename\fRは単なる平文ファイルで、1行に 1つのシンボル名が含まれています。行コメントはハッシュ文字(井桁文字)で始めることができます。
このオプションは複数回指定できます。注意:このオプションは、\fB\-G\fR または \fB\-\-keep\-global\-symbol\fR オプションと一緒に使用することはできません。
.IP \fB\-\-weaken\-symbols=\fR\fIfilename\fR 4
.IX Item "--weaken-symbols=filename"
\&\fIfilename\fR ファイルにリストされている各シンボルに \fB\-\-weaken\-symbol\fR オプションを適用します。\fIfilename\fRは単なる平文ファイルで、1行に 1つのシンボル名が含まれています。行コメントはハッシュ文字(井桁文字)で始めることができます。
このオプションは複数回指定できます。
.IP \fB\-\-alt\-machine\-code=\fR\fIindex\fR 4
.IX Item "--alt-machine-code=index"
出力のアーキテクチャに代替マシンコードがある場合は、デフォルトのコードの代わりに \fIindex\fR のコードを使用します。これは、マシンに正式なコードが割り当てられ、ツールチェーンが新しいコードを採用しているが、他のアプリケーションが使用されている元のコードに依存している場合に便利です。ELF ベースのアーキテクチャでは、 \fIindex\fR の選択肢が存在しない場合、値は絶対数として扱われ、ELF ヘッダの e_machine フィールドに格納されます。
.IP \fB\-\-writable\-text\fR 4
.IX Item "--writable-text"
出力テキストを書き込み可能にします。このオプションは、すべてのオブジェクトファイル形式に対して有効なわけではありません。
.IP \fB\-\-readonly\-text\fR 4
.IX Item "--readonly-text"
出力テキストを書き込み禁止にします。このオプションは、すべてのオブジェクトファイル形式に対して有効なわけではありません。
.IP \fB\-\-pure\fR 4
.IX Item "--pure"
出力ファイルをデマンドページとしてマークします。このオプションは、すべてのオブジェクトファイル形式に対して有効なわけではありません。
.IP \fB\-\-impure\fR 4
.IX Item "--impure"
出力ファイルを impure とマークします。このオプションは、すべてのオブジェクトファイル形式に対して有効なわけではありません。
.IP \fB\-\-prefix\-symbols=\fR\fIstring\fR 4
.IX Item "--prefix-symbols=string"
出力ファイルのすべてのシンボルの前に \fIstring\fR を付けます。
.IP \fB\-\-prefix\-sections=\fR\fIstring\fR 4
.IX Item "--prefix-sections=string"
出力ファイルのすべてのセクション名の前に \fIstring\fR を付けます。
.IP \fB\-\-prefix\-alloc\-sections=\fR\fIstring\fR 4
.IX Item "--prefix-alloc-sections=string"
出力ファイル内のすべての割り当てられたセクションの名前の前に \fIstring\fR を付けます。
.IP \fB\-\-add\-gnu\-debuglink=\fR\fIpath\-to\-file\fR 4
.IX Item "--add-gnu-debuglink=path-to-file"
\&\fIpath\-to\-file\fR への参照を含む .gnu_debuglink セクションを作成し、出力ファイルに追加します。注意:\fIpath\-to\-file\fR にファイルが存在する必要があります。.gnu_debuglink セクションを追加するプロセスには、デバッグ情報ファイルの内容のチェックサムをセクションに埋め込むことが含まれます。
.Sp
デバッグ情報ファイルがある場所で構築され、後で別の場所にインストールされる場合は、インストールされた場所へのパスを使用しないでください。インストールされたファイルがまだ存在しないため、\fB\-\-add\-gnu\-debuglink\fR オプションは失敗します。
代わりに、デバッグ情報ファイルを現在のディレクトリに置き、次のようにディレクトリコンポーネントなしで \fB\-\-add\-gnu\-debuglink\fR オプションを使用します:
.Sp
.Vb 1
\&         objcopy \-\-add\-gnu\-debuglink=foo.debug
.Ve
.Sp
デバッグ時に、デバッガは一連の既知の場所で個別のデバッグ情報ファイルを検索しようとします。これらの場所の正確なセットは、使用されているディストリビューションによって異なりますが、通常は次の場所が含まれます:
.RS 4
.ie n .IP """* 実行可能ファイルと同じディレクトリ。""" 4
.el .IP "\f(CW* 実行可能ファイルと同じディレクトリ。\fR" 4
.IX Item "* 実行可能ファイルと同じディレクトリ。"
.PD 0
.ie n .IP """* 実行可能ファイル .debug を含むディレクトリのサブディレクトリ""" 4
.el .IP "\f(CW* 実行可能ファイル .debug を含むディレクトリのサブディレクトリ\fR" 4
.IX Item "* 実行可能ファイル .debug を含むディレクトリのサブディレクトリ"
.ie n .IP """* グローバルデバッグディレクトリ(/usr/lib/debugなど)。""" 4
.el .IP "\f(CW* グローバルデバッグディレクトリ(/usr/lib/debugなど)。\fR" 4
.IX Item "* グローバルデバッグディレクトリ(/usr/lib/debugなど)。"
.PD
.RE
.RS 4
.Sp
デバッガが実行される前に、デバッグ情報ファイルがこれらの場所のいずれかにインストールされていれば、すべてが正しく動作するはずです。
.RE
.IP \fB\-\-keep\-section\-symbols\fR 4
.IX Item "--keep-section-symbols"
\&\fB\-\-strip\-debug\fR や \fB\-\-strip\-unneeded\fR などを使用してファイルをストリップする場合、通常はストリップされるセクション名を指定する記号が保持されます。
.IP \fB\-\-keep\-file\-symbols\fR 4
.IX Item "--keep-file-symbols"
\&\fB\-\-strip\-debug\fR や \fB\-\-strip\-unneeded\fR などを使用してファイルをストリップする場合、ソースファイル名を指定する記号を保持します。これらの記号を使用しない場合はストリップされます。
.IP \fB\-\-only\-keep\-debug\fR 4
.IX Item "--only-keep-debug"
ファイルをストリップし、\fB\-\-strip\-debug\fRでストリップされないセクションの内容を削除し、デバッグセクションをそのままにします。ELF ファイルでは、すべての note セクションが出力に保持されます。
.Sp
注意:除去されたセクションのセクションヘッダーはサイズも含めて保持されますが、セクションの内容は破棄されます。
実行可能ファイルが別のアドレス空間に再配置された場合でも、他のツールが debuginfo ファイルと実際の実行可能ファイルを照合できるように、セクションヘッダーは保持されます。
.Sp
このオプションを \fB\-\-add\-gnu\-debuglink\fR と組み合わせて使用して、 2つの部分からなる実行可能ファイルを作成することを目的としています。1つはストリップされたバイナリで、 RAM やディストリビューションで占有するスペースが少なくなります。もう 1つはデバッグ機能が必要な場合にのみ必要となるデバッグ情報ファイルです。これらのファイルを作成する推奨手順は、次のとおりです:
.RS 4
.ie n .IP "1.<実行可能ファイルを通常どおりリンクします。""foo"" と呼ばれていると仮定すると、 >" 4
.el .IP "1.<実行可能ファイルを通常どおりリンクします。\f(CWfoo\fR と呼ばれていると仮定すると、 >" 4
.IX Item "1.<実行可能ファイルを通常どおりリンクします。foo と呼ばれていると仮定すると、 >"
.PD 0
.ie n .IP "1.<""objcopy\-\-only\-keep\-debug foo foo.dbg"" を実行して、デバッグ情報を含むファイルを作成します。>" 4
.el .IP "1.<\f(CWobjcopy\-\-only\-keep\-debug foo foo.dbg\fR を実行して、デバッグ情報を含むファイルを作成します。>" 4
.IX Item "1.<objcopy--only-keep-debug foo foo.dbg を実行して、デバッグ情報を含むファイルを作成します。>"
.ie n .IP "1.<""objcopy\-\-strip\-debug foo"" を実行して、ストリップされた実行可能ファイルを作成します。>" 4
.el .IP "1.<\f(CWobjcopy\-\-strip\-debug foo\fR を実行して、ストリップされた実行可能ファイルを作成します。>" 4
.IX Item "1.<objcopy--strip-debug foo を実行して、ストリップされた実行可能ファイルを作成します。>"
.ie n .IP "1.<""objcopy\-\-add\-gnu\-debuglink=foo.dbg foo"" を実行して、デバッグ情報へのリンクを、ストリップされた実行可能ファイルに追加します。>" 4
.el .IP "1.<\f(CWobjcopy\-\-add\-gnu\-debuglink=foo.dbg foo\fR を実行して、デバッグ情報へのリンクを、ストリップされた実行可能ファイルに追加します。>" 4
.IX Item "1.<objcopy--add-gnu-debuglink=foo.dbg foo を実行して、デバッグ情報へのリンクを、ストリップされた実行可能ファイルに追加します。>"
.PD
.RE
.RS 4
.Sp
注意 \-\-\- デバッグ情報ファイルの拡張子としての \f(CW\*(C`.dbg\*(C'\fR の選択は任意です。また、 \f(CW\*(C`\-\-only\-keep\-debug\*(C'\fR ステップは任意です。代わりに次のようにすることもできます:
.IP 1.<実行可能ファイルを通常どおりリンクします。> 4
.IX Item "1.<実行可能ファイルを通常どおりリンクします。>"
.PD 0
.ie n .IP "1.<Copy ""foo"" to  ""foo.full"">" 4
.el .IP "1.<Copy \f(CWfoo\fR to  \f(CWfoo.full\fR>" 4
.IX Item "1.<Copy foo to foo.full>"
.ie n .IP "1.<Run ""objcopy \-\-strip\-debug foo"">" 4
.el .IP "1.<Run \f(CWobjcopy \-\-strip\-debug foo\fR>" 4
.IX Item "1.<Run objcopy --strip-debug foo>"
.ie n .IP "1.<Run ""objcopy \-\-add\-gnu\-debuglink=foo.full foo"">" 4
.el .IP "1.<Run \f(CWobjcopy \-\-add\-gnu\-debuglink=foo.full foo\fR>" 4
.IX Item "1.<Run objcopy --add-gnu-debuglink=foo.full foo>"
.PD
.RE
.RS 4
.Sp
つまり、 \fB\-\-add\-gnu\-debuglink\fR によってポイントされるファイルが完全な実行形式になります。\fB\-\-only\-keep\-debug\fR スイッチで作成されたファイルである必要はありません。
.Sp
注意 \-\-\- このスイッチは、完全にリンクされたファイルでの使用のみを目的としています。デバッグ情報が不完全な可能性があるオブジェクトファイルに対してこれを使用しても意味がありません。加えて、gnu_debuglink 機能は現在、デバッグ情報を含む 1つのファイル名の存在のみをサポートしており、オブジェクトファイルごとに複数のファイル名をサポートしていません。
.RE
.IP \fB\-\-strip\-dwo\fR 4
.IX Item "--strip-dwo"
すべてのDWARF.dwo セクションの内容を削除し、残りのデバッグセクションとすべてのシンボルはそのままにします。
このオプションは、コンパイラがデバッグ情報を .o ファイルと別の .dwo ファイルに分割する \fB\-gsplit\-dwarf\fR オプションの一部として使用することを意図しています。コンパイラはすべてのデバッグ情報を同じファイルに生成し、次に \fB\-\-extract\-dwo\fR オプションを使用して .dwo セクションを .dwo ファイルにコピーし、次に \fB\-\-strip\-dwo\fR オプションを使用して元の .o ファイルからこれらのセクションを削除します。
.IP \fB\-\-extract\-dwo\fR 4
.IX Item "--extract-dwo"
すべての DWARF.dwo セクションの内容を抽出します。詳細については、\fB\-\-strip\-dwo\fR オプションを参照してください。
.IP "\fB\-\-file\-alignment\fR \fInum\fR" 4
.IX Item "--file-alignment num"
ファイルのアラインメントを指定します。ファイル内のセクションは、常にこの番号の倍数であるファイルオフセットから始まります。デフォルト値は 512 です。
[このオプションは PE ターゲットに固有です。]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
.IX Item "--heap reserve"
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--heap reserve,commit"
.PD
このプログラムのヒープとして使用するために予約 (およびオプションでコミット) するメモリーのバイト数を指定します。
[このオプションは PE ターゲットに固有です。]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
.IX Item "--image-base value"
プログラムまたは DLL のベースアドレスとして \fIvalue\fR を使用します。これは、プログラムまたは dll が読み込まれるときに使用される最小のメモリ位置です。再配置の必要性を減らし、dll のパフォーマンスを向上させるには、各 dll に一意のベースアドレスを指定し、他の dll と重複しないようにする必要があります。デフォルトは、実行可能ファイルの場合は 0x400000、 dll の場合は 0x10000000 です。
[このオプションは PE ターゲットに固有です。]
.IP "\fB\-\-section\-alignment\fR \fInum\fR" 4
.IX Item "--section-alignment num"
[このオプションは PE ターゲットに固有です。]
.Sp
PE ヘッダーのセクションアラインメントフィールドを設定します (バイナリに存在する場合)。メモリ内のセクションは、常にこの数の倍数であるアドレスから始まります。デフォルト値は 0x1000 です。
.Sp
注意:セクションの LMA または VMA アドレスが調整されなくなり、それらのアドレスが \fB\-\-set\-section\-lma\fR または \fB\-\-set\-section\-vma\fR オプションを使用して設定されておらず、ファイルが完全に再配置された場合は、警告メッセージが発行されます。その後、LMA と VMA を更新する必要があるかどうかはユーザーの判断に委ねられます。
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
.IX Item "--stack reserve"
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
.IX Item "--stack reserve,commit"
.PD
このプログラムのスタックとして使用するために予約(およびオプションでコミット)するメモリのバイト数を指定します。
[このオプションは PE ターゲットに固有です。]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
.IX Item "--subsystem which"
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
.IX Item "--subsystem which:major"
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
.IX Item "--subsystem which:major.minor"
.PD
プログラムが実行されるサブシステムを指定します。\fIwhich\fR の有効な値は \f(CW\*(C`native\*(C'\fR、 \f(CW\*(C`windows\*(C'\fR 、
\&\f(CW\*(C`console\*(C'\fR 、 \f(CW\*(C`posix\*(C'\fR 、 \f(CW\*(C`efi\-app\*(C'\fR 、 \f(CW\*(C`efi\-bsd\*(C'\fR 、
\&\f(CW\*(C`efi\-rtd\*(C'\fR 、 \f(CW\*(C`sal\-rtd\*(C'\fR と \f(CW\*(C`xbox\*(C'\fR です。オプションで、サブシステムのバージョンも設定できます。\fIwhich\fR には数値も使用できます。
[このオプションは PE ターゲットに固有です。]
.IP \fB\-\-extract\-symbol\fR 4
.IX Item "--extract-symbol"
ファイルのセクションフラグとシンボルを保持し、セクションデータをすべて削除します。
具体的なオプションは以下のとおりです:
.RS 4
.IP *<すべてのセクションの内容を削除します。> 4
.IX Item "*<すべてのセクションの内容を削除します。>"
.PD 0
.IP *<各セクションのサイズをゼロに設定し> 4
.IX Item "*<各セクションのサイズをゼロに設定し>"
.IP *<ファイルの先頭アドレスを0に設定します。> 4
.IX Item "*<ファイルの先頭アドレスを0に設定します。>"
.PD
.RE
.RS 4
.Sp
このオプションは、VxWorks カーネルの \fI.sym\fR ファイルを構築するために使用されます。
また、 \fB\-\-just\-symbols\fR リンカーの入力ファイルのサイズを削減するのにも役立ちます。
.RE
.IP \fB\-\-compress\-debug\-sections\fR 4
.IX Item "--compress-debug-sections"
ELF ABI の zlib with SHF_COMPRESSED を使用して、DWARF デバッグセクションを圧縮します。注意:圧縮によって実際にセクションが \fIより大きく\fRなる場合、そのセクションは圧縮されません。
.IP \fB\-\-compress\-debug\-sections=none\fR 4
.IX Item "--compress-debug-sections=none"
.PD 0
.IP \fB\-\-compress\-debug\-sections=zlib\fR 4
.IX Item "--compress-debug-sections=zlib"
.IP \fB\-\-compress\-debug\-sections=zlib\-gnu\fR 4
.IX Item "--compress-debug-sections=zlib-gnu"
.IP \fB\-\-compress\-debug\-sections=zlib\-gabi\fR 4
.IX Item "--compress-debug-sections=zlib-gabi"
.IP \fB\-\-compress\-debug\-sections=zstd\fR 4
.IX Item "--compress-debug-sections=zstd"
.PD
ELF ファイルの場合、これらのオプションは DWARF デバッグセクションの圧縮方法を制御します。\fB\-\-compress\-debug\-sections=none\fR は \fB\-\-decompress\-debug\-sections\fRと同じです。
\&\fB\-\-compress\-debug\-sections=zlib\fR と
\&\fB\-\-compress\-debug\-sections=zlib\-gabi\fR は
\&\fB\-\-compress\-debug\-sections\fR と同じです。
\&\fB\-\-compress\-debug\-sections=zlib\-gnu\fR は、廃止された zlib\-gnu 形式を使用してDWARF デバッグセクションを圧縮します。デバッグセクションは \fB.zdebug\fR で始まるように名前が変更されます。
\&\fB\-\-compress\-debug\-sections=zstd\fR は、zstd を使用して DWARF デバッグセクションを圧縮します。注意:圧縮によって実際にセクションが\fIより大きく\fRなった場合、そのセクションは圧縮も名前変更もされません。
.IP \fB\-\-decompress\-debug\-sections\fR 4
.IX Item "--decompress-debug-sections"
DWARF デバッグセクションを解凍します。\fB.zdebug\fR セクションの場合、元の名前がリストアされます。
.IP \fB\-\-elf\-stt\-common=yes\fR 4
.IX Item "--elf-stt-common=yes"
.PD 0
.IP \fB\-\-elf\-stt\-common=no\fR 4
.IX Item "--elf-stt-common=no"
.PD
ELF ファイルの場合、共通シンボルを \f(CW\*(C`STT_COMMON\*(C'\fR 型と \f(CW\*(C`STT_OBJECT\*(C'\fR 型のどちらに変換するかを制御します。
\&\fB\-\-elf\-stt\-common=yes\fR は、共通のシンボルタイプを \f(CW\*(C`STT_COMMON\*(C'\fR に変換します。\fB\-\-elf\-stt\-common=no\fR は、共通のシンボルタイプを \f(CW\*(C`STT_OBJECT\*(C'\fR に変換します。
.IP \fB\-\-merge\-notes\fR 4
.IX Item "--merge-notes"
.PD 0
.IP \fB\-\-no\-merge\-notes\fR 4
.IX Item "--no-merge-notes"
.PD
ELF ファイルでは、重複する注記を削除して SHT_NOTE タイプのセクションのサイズを小さくします(または小さくしません)。
.IP \fB\-V\fR 4
.IX Item "-V"
.PD 0
.IP \fB\-\-version\fR 4
.IX Item "--version"
.PD
\&\fBobjcopy\fR のバージョン番号を表示します。
.IP \fB\-\-verilog\-data\-width=\fR\fIbytes\fR 4
.IX Item "--verilog-data-width=bytes"
Verilog 出力の場合、このオプションは各出力データ要素に変換されるバイト数を制御します。入力ターゲットは、変換のエンディアンを制御します。
.IP \fB\-v\fR 4
.IX Item "-v"
.PD 0
.IP \fB\-\-verbose\fR 4
.IX Item "--verbose"
.PD
詳細出力:変更されたすべてのオブジェクトファイルをリストします。アーカイブの場合、 \fBobjcopy \-V\fR はアーカイブのすべてのメンバーをリストします。
.IP \fB\-\-help\fR 4
.IX Item "--help"
\&\fBobjcopy\fR のオプションの要約を表示します。
.IP \fB\-\-info\fR 4
.IX Item "--info"
使用可能なすべてのアーキテクチャとオブジェクトフォーマットを示すリストを表示します。
.IP \fB@\fR\fIfile\fR 4
.IX Item "@file"
\&\fIfile\fR からコマンドラインオプションを読み込みます。読み込まれた
オプションは、元の @\fIfile\fR オプションの代わりに挿入されます。
\&\fIfile\fRが存在しない場合、または読み込めない場合、オプションは
文字通りに扱われ、削除されません。
.Sp
\&\fIfile\fR 中のオプションは空白で区切られます。空白文字は、オプション
全体を一重引用符または二重引用符で囲むことによってオプションに含める
ことができます。任意の文字 (バックスラッシュを含む) は、含まれる文字の
前にバックスラッシュを付けることによって含めることができます。
\&\fIfile\fR 自体に追加の @\fIfile\fR オプションを含めることができます。
このようなオプションは再帰的に処理されます。
.SH "関連項目"
.IX Header "関連項目"
\&\fBld\fR\|(1) 、\fBobjdump\fR\|(1) 、と \fIbinutils\fR のInfo エントリ。
.SH 著作権
.IX Header "著作権"
Copyright (c) 1991\-2025 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front\-Cover Texts, and with no
Back\-Cover Texts.  A copy of the license is included in the
section entitled "GNU Free Documentation License".
.SH 日本語訳
対応バージョン:2.45.50
翻訳日:2025-10-13
翻訳者:ribbon
