.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "C++FILT 1"
.TH C++FILT 1 2025-09-17 binutils-2.45.50 "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.mso ja.tmac
.hla ja
.SH 名前
c++filt \- C++ と Java シンボルの デコード(demangle)
.SH 書式
.IX Header "書式"
c++filt [\fB\-_\fR|\fB\-\-strip\-underscore\fR]
        [\fB\-n\fR|\fB\-\-no\-strip\-underscore\fR]
        [\fB\-p\fR|\fB\-\-no\-params\fR]
        [\fB\-t\fR|\fB\-\-types\fR]
        [\fB\-i\fR|\fB\-\-no\-verbose\fR]
        [\fB\-r\fR|\fB\-\-no\-recurse\-limit\fR]
        [\fB\-R\fR|\fB\-\-recurse\-limit\fR]
        [\fB\-s\fR \fIformat\fR|\fB\-\-format=\fR\fIformat\fR]
        [\fB\-\-help\fR]  [\fB\-\-version\fR]  [\fIsymbol\fR...]
.SH 説明
.IX Header "説明"
C++言語とJava言語には関数オーバーロードが用意されています。つまり、各関数が異なる型のパラメータを取る場合、同じ名前で多くの関数を記述できます。これらの似たような名前の関数を区別できるように、C++ と Java はそれらを、それぞれの異なるバージョンを一意に識別する低レベルのアセンブラ名にエンコードします。
このプロセスは \fImangling (訳注: エンコード)\fR として知られています。\fBc++filt\fR [1]プログラムは逆のマッピングを行います。これはローレベルの名前をユーザーレベルの名前にデコード (\fIdemangles\fR) して、読み取り可能にします。
.PP
入力含まれるすべての英数字の単語 (文字、数字、アンダースコア、ドル記号 ($) 、またはピリオドで構成される) は、潜在的にエンコード (mangled) された名前です。
名前が C++ 名にデコードされた場合、出力中のローレベルの名前が C++ 名に置き換えられます。それ以外の場合は、元の単語が出力されます。
このようにして、エンコード (mangled) された名前を含むアセンブラソースファイル全体を \fBc++filt\fR 経由で渡すことができ、デコード (demangled) された名前を含んだ同じソースファイルを見ることができます。
.PP
\&\fBc++filt\fR を使用して、以下のようにコマンドラインに渡すことで、個々のシンボルを解読することもできます。
.PP
.Vb 1
\&        c++filt <symbol>
.Ve
.PP
\&\fIsymbol\fR 引数がない場合、 \fBc++filt\fR はシンボル名を標準入力から読み込みます。すべての結果は標準出力に表示されます。コマンドラインから名前を読み込むことと、標準入力から名前を読み込むことの違いは、コマンドライン引数はエンコード (mangled) された名前であることが期待され、前後のテキストと区別するためのチェックが行われないことです。たとえば、次のようになります:
.PP
.Vb 1
\&        c++filt \-n _Z1fv
.Ve
.PP
これは機能し、名前を "f()" にデコード (demangle) しますが、一方:
.PP
.Vb 1
\&        c++filt \-n _Z1fv,
.Ve
.PP
は動きません。(エンコード (mangled) された名前の最後に余分なコンマがあるため、無効になっていることに注意してください)。ただし、次のコマンドは機能します:
.PP
.Vb 1
\&        echo _Z1fv, | c++filt \-n
.Ve
.PP
は "f()," を表示します。すなわち、デコード (demangled) された名前の後にコンマが続きます。これは、標準入力から読み込まれた名前がアセンブラソースファイルの一部であることを想定しているためです。アセンブラソースファイルでは、エンコード (mangled) された名前の後に余分な文字が続くことがあります。たとえば以下のようなものです:
.PP
.Vb 1
\&            .type   _Z1fv, @function
.Ve
.SH オプション
.IX Header "オプション"
.IP \fB\-_\fR 4
.IX Item "-_"
.PD 0
.IP \fB\-\-strip\-underscore\fR 4
.IX Item "--strip-underscore"
.PD
一部のシステムでは、 C コンパイラと C++ コンパイラの両方で、すべての名前の前にアンダースコアが付けられます。.  たとえば、C での名前 \f(CW\*(C`foo\*(C'\fR は、ローレベルの名前 \f(CW\*(C`_foo\*(C'\fR を取得します。このオプションを使用すると、最初のアンダースコアが削除されます。\fBc++filt\fR がデフォルトでアンダースコアを削除するかどうかは、ターゲットに依存します。
.IP \fB\-n\fR 4
.IX Item "-n"
.PD 0
.IP \fB\-\-no\-strip\-underscore\fR 4
.IX Item "--no-strip-underscore"
.PD
先頭のアンダースコアを削除しません。.
.IP \fB\-p\fR 4
.IX Item "-p"
.PD 0
.IP \fB\-\-no\-params\fR 4
.IX Item "--no-params"
.PD
関数名を デコード (demangling) するときに、関数のパラメータの型を表示しません。
.IP \fB\-t\fR 4
.IX Item "-t"
.PD 0
.IP \fB\-\-types\fR 4
.IX Item "--types"
.PD
タイプと関数名をデコード (demangle) しようとします。これはデフォルトで無効になっています。なぜなら、エンコード (mangled) された型は通常、コンパイラの内部でのみ使用され、 非エンコード (non\-mangled) の名前と混同される可能性があるからです。例えば、 "a" という名前の関数がエンコード (mangled) された型の名前として扱われる場合、 "signed char" にデコード (demangled) されることになります。
.IP \fB\-i\fR 4
.IX Item "-i"
.PD 0
.IP \fB\-\-no\-verbose\fR 4
.IX Item "--no-verbose"
.PD
実装の詳細(存在する場合)を、デコード (demangled) した出力に含めません。
.IP \fB\-r\fR 4
.IX Item "-r"
.PD 0
.IP \fB\-R\fR 4
.IX Item "-R"
.IP \fB\-\-recurse\-limit\fR 4
.IX Item "--recurse-limit"
.IP \fB\-\-no\-recurse\-limit\fR 4
.IX Item "--no-recurse-limit"
.IP \fB\-\-recursion\-limit\fR 4
.IX Item "--recursion-limit"
.IP \fB\-\-no\-recursion\-limit\fR 4
.IX Item "--no-recursion-limit"
.PD
文字列の削除中に実行される再帰の量の制限を有効または無効にします。名前をエンコード (mangling) する形式は無限レベルの再帰を許すので、デコード操作がホストマシンで利用可能なスタック空間の量を使い果たし、メモリ障害を引き起こすような文字列を作成する可能性があります。この制限では、再帰を 2048レベルまでのネストに制限することで、これが発生しないようにしています。
.Sp
デフォルトでは、この制限は有効になっていますが、本当に複雑な名前をデコード (demangle) するには無効にする必要がある場合があります。ただし、再帰制限が無効になっている場合は、スタックが枯渇する可能性があり、そのようなイベントに関するバグレポートは拒否されることに注意してください。
.Sp
\&\fB\-r\fR オプションは、\fB\-\-no\-recurse\-limit\fR オプションの同義語です。\fB\-R\fR オプションは、\fB\-\-recurse\-limit\fR オプションの同義語です。
.IP "\fB\-s\fR \fIformat\fR" 4
.IX Item "-s format"
.PD 0
.IP \fB\-\-format=\fR\fIformat\fR 4
.IX Item "--format=format"
.PD
\&\fBc++filt\fR は、異なるコンパイラによって使用されるさまざまなエンコード (mangling) メソッドをデコードできます。このオプションの引数は、以下のように使用する方式を選択します:
.RS 4
.ie n .IP """auto""" 4
.el .IP \f(CWauto\fR 4
.IX Item "auto"
実行可能ファイルに基づく自動選択(デフォルトの方式)
.ie n .IP """gnu""" 4
.el .IP \f(CWgnu\fR 4
.IX Item "gnu"
GNU C++ コンパイラ (g++) で使われているもの
.ie n .IP """lucid""" 4
.el .IP \f(CWlucid\fR 4
.IX Item "lucid"
Lucid コンパイラ (lcc) で使われているもの
.ie n .IP """arm""" 4
.el .IP \f(CWarm\fR 4
.IX Item "arm"
C++ Annotated Reference Manual で規定されたもの
.ie n .IP """hp""" 4
.el .IP \f(CWhp\fR 4
.IX Item "hp"
HP コンパイラ (aCC) で使われるもの
.ie n .IP """edg""" 4
.el .IP \f(CWedg\fR 4
.IX Item "edg"
EDG のコンパイラで使われるもの
.ie n .IP """gnu\-v3""" 4
.el .IP \f(CWgnu\-v3\fR 4
.IX Item "gnu-v3"
GNU C++ のコンパイラ (g++) が V3 ABI とともに使われるもの
.ie n .IP """java""" 4
.el .IP \f(CWjava\fR 4
.IX Item "java"
GNU Java コンパイラ (gcj) で使われるもの
.ie n .IP """gnat""" 4
.el .IP \f(CWgnat\fR 4
.IX Item "gnat"
GNU Ada コンパイラ (GNAT) で使われるもの。
.RE
.RS 4
.RE
.IP \fB\-\-help\fR 4
.IX Item "--help"
オプションの概要を \fBc++filt\fR に出力して終了します。
.IP \fB\-\-version\fR 4
.IX Item "--version"
\&\fBc++filt\fR のバージョンを表示して終了します。
.IP \fB@\fR\fIfile\fR 4
.IX Item "@file"
\&\fIfile\fR からコマンドラインオプションを読み込みます。読み込まれた
オプションは、元の @\fIfile\fR オプションの代わりに挿入されます。
\&\fIfile\fRが存在しない場合、または読み込めない場合、オプションは
文字通りに扱われ、削除されません。
.Sp
\&\fIfile\fR 中のオプションは空白で区切られます。空白文字は、オプション
全体を一重引用符または二重引用符で囲むことによってオプションに含める
ことができます。任意の文字 (バックスラッシュを含む) は、含まれる文字の
前にバックスラッシュを付けることによって含めることができます。
\&\fIfile\fR 自体に追加の @\fIfile\fR オプションを含めることができます。
このようなオプションは再帰的に処理されます。
.SH FOOTNOTES
.IX Header "FOOTNOTES"
.IP 1. 4
.Vb 1
\& MS\-DOSではファイル名に C<+> 文字を使用できないため、このプログラムは B<CXXFILT> という名前になります。
.Ve
.SH "関連項目"
.IX Header "関連項目"
\&\fIbinutils\fR の Info エントリ.
.SH 著作権
.IX Header "著作権"
Copyright (c) 1991\-2025 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front\-Cover Texts, and with no
Back\-Cover Texts.  A copy of the license is included in the
section entitled "GNU Free Documentation License".
